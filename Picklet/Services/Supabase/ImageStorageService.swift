import Foundation
import Storage
import Supabase
import UIKit

/// Supabase Storage „ÇíÊâ±„ÅÜÊ±éÁî®„Ç§„É°„Éº„Ç∏„Çµ„Éº„Éì„Çπ
final class ImageStorageService {
    /// „Éá„Éï„Ç©„É´„Éà„Éê„Ç±„ÉÉ„ÉàÂêç„Çí‰Ωø„ÅÜ„Ç∑„É≥„Ç∞„É´„Éà„É≥
    static let shared = ImageStorageService()

    private let client: SupabaseClient
    /// „Éá„Éï„Ç©„É´„Éà„Éê„Ç±„ÉÉ„ÉàÂêç
    private let defaultBucketName: String

    /// ÂÜÖÈÉ®Áî®„Ç§„Éã„Ç∑„É£„É©„Ç§„Ç∂
    private init(defaultBucketName: String = "originals",
                 client: SupabaseClient = AuthService.shared.client) {
        self.defaultBucketName = defaultBucketName
        self.client = client
        print("üîß ImageStorageService ÂàùÊúüÂåñ: „Éá„Éï„Ç©„É´„Éà„Éê„Ç±„ÉÉ„Éà = \(defaultBucketName)")
    }

    /// „Ç´„Çπ„Çø„É†„Éê„Ç±„ÉÉ„ÉàÂêë„Åë„ÅÆ„Ç§„Éã„Ç∑„É£„É©„Ç§„Ç∂
    convenience init(bucketName: String) {
        self.init(defaultBucketName: bucketName)
    }

    /// ÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„ÄÅÂÖ¨Èñã URL „ÇíËøî„Åô
    /// - Parameters:
    ///   - image: „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„Çã UIImage
    ///   - filename: „Çπ„Éà„É¨„Éº„Ç∏‰∏ä„ÅÆ„Éï„Ç°„Ç§„É´ÂêçÔºàÊã°ÂºµÂ≠ê„Å™„ÅóÔºâ
    ///   - bucketName: ‰ΩøÁî®„Åô„Çã„Éê„Ç±„ÉÉ„ÉàÂêç„ÄÇÊú™ÊåáÂÆöÊôÇ„ÅØ„Éá„Éï„Ç©„É´„Éà„Éê„Ç±„ÉÉ„Éà„Çí‰Ωø„ÅÜ
    /// - Throws: ÁîªÂÉèÂ§âÊèõÔºè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºèË®≠ÂÆöÂèñÂæó„Ç®„É©„Éº
    /// - Returns: ÂÖ¨Èñã URL string
    func uploadImage(
        _ image: UIImage,
        for filename: String,
        bucketName: String? = nil
    ) async throws -> String {
        print("üì§ ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã: filename=\(filename)")
        
        // 1. ÁîªÂÉè„ÇíJPEG„Éá„Éº„Çø„Å´Â§âÊèõ
        let data = try prepareImageData(image)
        
        // 2. ÁîªÂÉè„ÇíSupabase„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        let bucket = bucketName ?? defaultBucketName
        let path = "\(filename).jpg"
        try await uploadToSupabase(data: data, bucket: bucket, path: path)
        
        // 3. ÂÖ¨ÈñãURL„ÇíÁîüÊàê„Åó„Å¶Ëøî„Åô
        return try generatePublicURL(bucket: bucket, path: path)
    }
    
    /// ÁîªÂÉè„ÇíJPEG„Éá„Éº„Çø„Å´Â§âÊèõ
    private func prepareImageData(_ image: UIImage) throws -> Data {
        let resized = image.resized(toMaxPixel: 800)
        guard let data = resized.jpegData(compressionQuality: 0.6) else {
            let error = NSError(
                domain: "upload",
                code: 0,
                userInfo: [NSLocalizedDescriptionKey: "ÁîªÂÉè„ÅÆÂ§âÊèõ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"]
            )
            print("‚ùå ÁîªÂÉèÂ§âÊèõ„Ç®„É©„Éº: \(error.localizedDescription)")
            throw error
        }
        print("‚úì ÁîªÂÉèÂ§âÊèõÊàêÂäü: \(data.count) bytes")
        return data
    }
    
    /// Supabase„Çπ„Éà„É¨„Éº„Ç∏„Å´ÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    private func uploadToSupabase(data: Data, bucket: String, path: String) async throws {
        print("üîÑ Supabase„Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã: bucket=\(bucket), path=\(path)")
        do {
            _ = try await client.storage
                .from(bucket)
                .upload(
                    path,
                    data: data,
                    options: FileOptions(contentType: "image/jpeg")
                )
            print("‚úÖ Supabase„Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü")
        } catch {
            print("‚ùå Supabase „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº: \(error.localizedDescription)")
            throw error
        }
    }
    
    /// ÂÖ¨ÈñãURL„ÇíÁîüÊàê
    private func generatePublicURL(bucket: String, path: String) throws -> String {
        guard let baseURL = Bundle.main
            .object(forInfoDictionaryKey: "SUPABASE_URL") as? String
        else {
            let error = NSError(
                domain: "config",
                code: 0,
                userInfo: [NSLocalizedDescriptionKey: "Supabase URL„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"]
            )
            print("‚ùå SUPABASE_URL ÂèñÂæó„Ç®„É©„Éº: Info.plist„Å´„Ç≠„Éº„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
            throw error
        }

        print("‚úì SUPABASE_URL ÂèñÂæóÊàêÂäü: \(baseURL)")

        // URL„ÇíÁîüÊàê
        let urlString = "\(baseURL)/storage/v1/object/public/\(bucket)/\(path)"
        print("üì∑ ÁîªÂÉèURLÁîüÊàêÂÆå‰∫Ü: \(urlString)")

        // URLÂΩ¢Âºè„ÅÆÊ§úË®º
        if let url = URL(string: urlString) {
            print("‚úÖ URLÂΩ¢Âºè„ÅÆÊ§úË®ºOK: \(url)")
        } else {
            print("‚ö†Ô∏è ÁÑ°Âäπ„Å™URLÊñáÂ≠óÂàó: \(urlString)")
        }

        return urlString
    }

//    /// ÊåáÂÆö„Éê„Ç±„ÉÉ„ÉàÂÜÖ„ÅÆ„Éë„Çπ„Åã„Çâ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„ÄÅURL ÈÖçÂàó„Å®„Åó„Å¶Ëøî„Åô
//    /// - Parameters:
//    ///   - path: „Éê„Ç±„ÉÉ„ÉàÂÜÖ„ÅÆ„É™„Çπ„ÉàÂØæË±°„Éë„ÇπÔºà‰æã: „É¶„Éº„Ç∂IDÔºâ
//    ///   - bucketName: ‰ΩøÁî®„Åô„Çã„Éê„Ç±„ÉÉ„ÉàÂêç„ÄÇÊú™ÊåáÂÆöÊôÇ„ÅØ„Éá„Éï„Ç©„É´„Éà„Éê„Ç±„ÉÉ„Éà„Çí‰Ωø„ÅÜ
//    /// - Returns: ÂèñÂæó„Åó„Åü„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂÖ¨Èñã URL ‰∏ÄË¶ß
//    func listImageURLs(
//        under path: String,
//        bucketName: String? = nil
//    ) async throws -> [URL] {
//        guard let userId = AuthService.shared.currentUser?.id.uuidString else {
//            throw NSError(domain: "auth", code: 401,
//                          userInfo: [NSLocalizedDescriptionKey: "„É¶„Éº„Ç∂„Éº„ÅåÊú™„É≠„Ç∞„Ç§„É≥„Åß„Åô"])
//        }
//        let bucket = bucketName ?? defaultBucketName
//        let objects = try await client.storage
//            .from(bucket)
//            .list(path: path)
//        guard let baseURL = Bundle.main
//                .object(forInfoDictionaryKey: "SUPABASE_URL") as? String
//        else {
//            throw NSError(domain: "config", code: 0,
//                          userInfo: [NSLocalizedDescriptionKey: "Supabase URL„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"])
//        }
//        return objects.compactMap { obj in
//            URL(string: "\(baseURL)/storage/v1/object/public/\(bucket)/\(path)/\(obj.name)")
//        }
//    }
}
