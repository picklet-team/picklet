import Foundation

// MARK: - Wear History Management

extension ClothingViewModel {
  /// ÁùÄÁî®Â±•Ê≠¥„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâË™≠„ÅøËæº„ÇÄ
  func loadWearHistories() {
    print("üìÇ SQLite„Åã„ÇâÁùÄÁî®Â±•Ê≠¥„ÇíË™≠„ÅøËæº„ÅøÈñãÂßã")
    wearHistories = SQLiteManager.shared.loadWearHistories()
    print("‚úÖ ÁùÄÁî®Â±•Ê≠¥Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü: \(wearHistories.count)‰ª∂")
  }

  /// ÁùÄÁî®Â±•Ê≠¥„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
  private func saveWearHistories() {
    print("üíæ ÁùÄÁî®Â±•Ê≠¥„Çí‰øùÂ≠òÈñãÂßã")

    guard let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
      print("‚ùå „Éâ„Ç≠„É•„É°„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
      return
    }

    let filePath = documentsPath.appendingPathComponent("wear_histories.json")

    do {
      let data = try JSONEncoder().encode(wearHistories)
      try data.write(to: filePath)
      print("‚úÖ ÁùÄÁî®Â±•Ê≠¥‰øùÂ≠òÂÆå‰∫Ü: \(wearHistories.count)‰ª∂")
    } catch {
      print("‚ùå ÁùÄÁî®Â±•Ê≠¥‰øùÂ≠ò„Ç®„É©„Éº: \(error)")
    }
  }

  /// ÁùÄÁî®Â±•Ê≠¥„ÇíËøΩÂä†
  func addWearHistory(for clothingId: UUID, notes: String? = nil) {
    print("üëï ÁùÄÁî®Â±•Ê≠¥„ÇíËøΩÂä†: clothingId=\(clothingId)")

    let history = WearHistory(clothingId: clothingId, notes: notes)
    wearHistories.append(history)

    // 1. SQLite„Å´ÁùÄÁî®Â±•Ê≠¥„Çí‰øùÂ≠ò
    SQLiteManager.shared.saveWearHistories(wearHistories)

    // 2. Clothing„ÅÆÁùÄÁî®ÂõûÊï∞„ÇíÊõ¥Êñ∞
    if let index = clothes.firstIndex(where: { $0.id == clothingId }) {
      clothes[index].wearCount += 1
      clothes[index].updatedAt = Date()

      // 3. Êõ¥Êñ∞„Åï„Çå„ÅüClothing„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
      clothingService.updateClothing(clothes[index])
    }

    print("‚úÖ ÁùÄÁî®Â±•Ê≠¥ËøΩÂä†ÂÆå‰∫Ü")
  }

  /// ÁâπÂÆö„ÅÆÊúç„ÅÆÁùÄÁî®Â±•Ê≠¥„ÇíÂèñÂæó
  func getWearHistories(for clothingId: UUID) -> [WearHistory] {
    return wearHistories.filter { $0.clothingId == clothingId }
  }

  /// ÁùÄÁî®ÂõûÊï∞„ÇíÂèñÂæó
  func getWearCount(for clothingId: UUID) -> Int {
    return wearHistories.filter { $0.clothingId == clothingId }.count
  }

  /// ÊúÄÂæå„ÅÆÁùÄÁî®Êó•„ÇíÂèñÂæó
  func getLastWornDate(for clothingId: UUID) -> Date? {
    return wearHistories
      .filter { $0.clothingId == clothingId }
      .max(by: { $0.wornAt < $1.wornAt })?.wornAt
  }

  /// 1Âõû„ÅÇ„Åü„Çä„ÅÆÁùÄÁî®Âçò‰æ°„ÇíË®àÁÆó
  func getCostPerWear(for clothingId: UUID) -> Double? {
    guard let clothing = clothes.first(where: { $0.id == clothingId }),
          let price = clothing.purchasePrice
    else { return nil }

    let count = getWearCount(for: clothingId)
    return count.isEmpty ? price : price / Double(count)
  }

  /// ‰ªäÊó•ÁùÄÁî®Ê∏à„Åø„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
  func isWornToday(for clothingId: UUID) -> Bool {
    let today = Calendar.current.startOfDay(for: Date())
    let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: today)!

    return wearHistories.contains { history in
      history.clothingId == clothingId &&
        history.wornAt >= today &&
        history.wornAt < tomorrow
    }
  }

  /// ‰ªäÊó•„ÅÆÁùÄÁî®Â±•Ê≠¥„ÇíÂâäÈô§
  func removeWearHistoryForToday(for clothingId: UUID) {
    let today = Calendar.current.startOfDay(for: Date())
    let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: today)!

    // ÂâäÈô§ÂØæË±°„ÅÆÂ±•Ê≠¥Êï∞„Çí„Ç´„Ç¶„É≥„Éà
    let removedCount = wearHistories.filter { history in
      history.clothingId == clothingId &&
        history.wornAt >= today &&
        history.wornAt < tomorrow
    }.count

    // ÁùÄÁî®Â±•Ê≠¥„ÇíÂâäÈô§
    wearHistories.removeAll { history in
      history.clothingId == clothingId &&
        history.wornAt >= today &&
        history.wornAt < tomorrow
    }

    // 1. SQLite„Å´ÁùÄÁî®Â±•Ê≠¥„Çí‰øùÂ≠ò
    SQLiteManager.shared.saveWearHistories(wearHistories)

    // 2. Clothing„ÅÆÁùÄÁî®ÂõûÊï∞„ÇíÊ∏õ„Çâ„Åô
    if removedCount > 0, let index = clothes.firstIndex(where: { $0.id == clothingId }) {
      clothes[index].wearCount = max(0, clothes[index].wearCount - removedCount)
      clothes[index].updatedAt = Date()

      // 3. Êõ¥Êñ∞„Åï„Çå„ÅüClothing„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
      clothingService.updateClothing(clothes[index])
    }
  }
}
